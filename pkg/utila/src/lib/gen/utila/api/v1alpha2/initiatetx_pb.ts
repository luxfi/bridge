// @generated by protoc-gen-es v2.2.2 with parameter "target=ts"
// @generated from file utila/api/v1alpha2/initiatetx.proto (package utila.api.v1alpha2, syntax proto3)
/* eslint-disable */

import type { GenEnum, GenFile, GenMessage } from "@bufbuild/protobuf/codegenv1";
import { enumDesc, fileDesc, messageDesc } from "@bufbuild/protobuf/codegenv1";
import { file_google_api_field_behavior } from "../../../google/api/field_behavior_pb";
import { file_google_api_resource } from "../../../google/api/resource_pb";
import { file_google_api_visibility } from "../../../google/api/visibility_pb";
import { file_google_protobuf_descriptor, file_google_protobuf_wrappers } from "@bufbuild/protobuf/wkt";
import { file_protoc_gen_openapiv2_options_annotations } from "../../../protoc-gen-openapiv2/options/annotations_pb";
import { file_utila_api_v1_api } from "../v1/api_pb";
import type { NetworkAddressInfo, ReferencedResource } from "./resources_pb";
import { file_utila_api_v1alpha2_resources } from "./resources_pb";
import type { Transaction } from "./transactiondef_pb";
import { file_utila_api_v1alpha2_transactiondef } from "./transactiondef_pb";
import type { ConvertedValue } from "./types_pb";
import { file_utila_api_v1alpha2_types } from "./types_pb";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file utila/api/v1alpha2/initiatetx.proto.
 */
export const file_utila_api_v1alpha2_initiatetx: GenFile = /*@__PURE__*/
  fileDesc("CiN1dGlsYS9hcGkvdjFhbHBoYTIvaW5pdGlhdGV0eC5wcm90bxISdXRpbGEuYXBpLnYxYWxwaGEyIt8JChpJbml0aWF0ZVRyYW5zYWN0aW9uUmVxdWVzdBJZCgZwYXJlbnQYASABKAlCSZJBK0oVInZhdWx0cy8xYjI1NjM1YTViM2Yiyj4R+gIOdmF1bHQ9dmF1bHRzLyriQQEC+kEUChJhcGkudXRpbGEuaW8vVmF1bHQSTQoHZGV0YWlscxgCIAEoCzI2LnV0aWxhLmFwaS52MWFscGhhMi5Jbml0aWF0ZVRyYW5zYWN0aW9uUmVxdWVzdC5EZXRhaWxzQgTiQQECEkQKCHByaW9yaXR5GAMgASgOMiwudXRpbGEuYXBpLnYxYWxwaGEyLlRyYW5zYWN0aW9uUHJpb3JpdHkuRW51bUIE4kEBARISCgRub3RlGAQgASgJQgTiQQEBEmcKEmRlc2lnbmF0ZWRfc2lnbmVycxgHIAMoCUJLkkEuShpbInVzZXJzL25hbWVAZXhhbXBsZS5jb20iXco+D/oCDG5hbWU9dXNlcnMvKuJBAQH6QRMKEWFwaS51dGlsYS5pby9Vc2VyEhsKDXZhbGlkYXRlX29ubHkYBSABKAhCBOJBAQESQwoKcmVxdWVzdF9pZBgGIAEoCUIvkkEoSiYiNGJhNmIzYjEtZWU5MS00ZGNmLWE0YjMtZTQ0ODdkN2YwZjQ2IuJBAQESHAoOcnVuX3NpbXVsYXRpb24YCCABKAhCBOJBAQESKgocaW5jbHVkZV9yZWZlcmVuY2VkX3Jlc291cmNlcxhkIAEoCEIE4kEBARruBAoHRGV0YWlscxI7Cg5hc3NldF90cmFuc2ZlchgDIAEoCzIhLnV0aWxhLmFwaS52MWFscGhhMi5Bc3NldFRyYW5zZmVySAASRgoUYXNzZXRfYmF0Y2hfdHJhbnNmZXIYBCABKAsyJi51dGlsYS5hcGkudjFhbHBoYTIuQmF0Y2hBc3NldFRyYW5zZmVySAASPQoPZXZtX3RyYW5zYWN0aW9uGAIgASgLMiIudXRpbGEuYXBpLnYxYWxwaGEyLkVWTVRyYW5zYWN0aW9uSAASQAoRZXZtX3BlcnNvbmFsX3NpZ24YBSABKAsyIy51dGlsYS5hcGkudjFhbHBoYTIuRVZNUGVyc29uYWxTaWduSAASSAoWZXZtX3NpZ25fdHlwZWRfZGF0YV92NBgGIAEoCzImLnV0aWxhLmFwaS52MWFscGhhMi5FVk1TaWduVHlwZWREYXRhVjRIABJFChNleGNoYW5nZV93aXRoZHJhd2FsGAcgASgLMiYudXRpbGEuYXBpLnYxYWxwaGEyLkV4Y2hhbmdlV2l0aGRyYXdhbEgAElUKEnNvbGFuYV90cmFuc2FjdGlvbhgIIAEoCzIlLnV0aWxhLmFwaS52MWFscGhhMi5Tb2xhbmFUcmFuc2FjdGlvbkIQ+tLkkwIKEghJTlRFUk5BTEgAEmoKHXNlcmlhbGl6ZWRfc29sYW5hX3RyYW5zYWN0aW9uGAkgASgLMi8udXRpbGEuYXBpLnYxYWxwaGEyLlNlcmlhbGl6ZWRTb2xhbmFUcmFuc2FjdGlvbkIQ+tLkkwIKEghJTlRFUk5BTEgAQgkKB2RldGFpbHMaNwoFVXRpbGESGwoOZXh0ZW5zaW9uX2luZm8YASABKAlIAIgBAUIRCg9fZXh0ZW5zaW9uX2luZm8ixAQKHUVzdGltYXRlVHJhbnNhY3Rpb25GZWVSZXF1ZXN0ElkKBnBhcmVudBgBIAEoCUJJkkErShUidmF1bHRzLzFiMjU2MzVhNWIzZiLKPhH6Ag52YXVsdD12YXVsdHMvKuJBAQL6QRQKEmFwaS51dGlsYS5pby9WYXVsdBJQCgdkZXRhaWxzGAIgASgLMjkudXRpbGEuYXBpLnYxYWxwaGEyLkVzdGltYXRlVHJhbnNhY3Rpb25GZWVSZXF1ZXN0LkRldGFpbHNCBOJBAQISRAoIcHJpb3JpdHkYAyABKA4yLC51dGlsYS5hcGkudjFhbHBoYTIuVHJhbnNhY3Rpb25Qcmlvcml0eS5FbnVtQgTiQQEBGq8CCgdEZXRhaWxzEjsKDmFzc2V0X3RyYW5zZmVyGAMgASgLMiEudXRpbGEuYXBpLnYxYWxwaGEyLkFzc2V0VHJhbnNmZXJIABJGChRhc3NldF9iYXRjaF90cmFuc2ZlchgEIAEoCzImLnV0aWxhLmFwaS52MWFscGhhMi5CYXRjaEFzc2V0VHJhbnNmZXJIABI9Cg9ldm1fdHJhbnNhY3Rpb24YAiABKAsyIi51dGlsYS5hcGkudjFhbHBoYTIuRVZNVHJhbnNhY3Rpb25IABJVChJzb2xhbmFfdHJhbnNhY3Rpb24YCCABKAsyJS51dGlsYS5hcGkudjFhbHBoYTIuU29sYW5hVHJhbnNhY3Rpb25CEPrS5JMCChIISU5URVJOQUxIAEIJCgdkZXRhaWxzIrwBCh5Fc3RpbWF0ZVRyYW5zYWN0aW9uRmVlUmVzcG9uc2USNwoHZXZtX2ZlZRgBIAEoCzIkLnV0aWxhLmFwaS52MWFscGhhMi5FVk1GZWVFc3RpbWF0aW9uSAASEQoJdG90YWxfZmVlGAMgASgJEj8KE2NvbnZlcnRlZF90b3RhbF9mZWUYBSABKAsyIi51dGlsYS5hcGkudjFhbHBoYTIuQ29udmVydGVkVmFsdWVCDQoLZmVlX2RldGFpbHMiNwoQRVZNRmVlRXN0aW1hdGlvbhIQCghnYXNfdXNlZBgBIAEoCRIRCglnYXNfcHJpY2UYAiABKAkiUgoTVHJhbnNhY3Rpb25Qcmlvcml0eSI7CgRFbnVtEhQKEEVOVU1fVU5TUEVDSUZJRUQQABIHCgNMT1cQARIKCgZOT1JNQUwQAhIICgRISUdIEAMiqQEKC0VWTVByaW9yaXR5EiAKCWdhc19saW1pdBgBIAEoA0II4kEBAYC1GAFIAIgBARIbCglnYXNfcHJpY2UYAiABKAlCCOJBAQGAtRgBEioKGG1heF9wcmlvcml0eV9mZWVfcGVyX2dhcxgDIAEoCUII4kEBAYC1GAESIQoPbWF4X2ZlZV9wZXJfZ2FzGAQgASgJQgjiQQEBgLUYAUIMCgpfZ2FzX2xpbWl0IlMKFEVWTVRyYW5zYWN0aW9uUGFyYW1zEjsKDGdhc19zZXR0aW5ncxgGIAEoCzIfLnV0aWxhLmFwaS52MWFscGhhMi5FVk1Qcmlvcml0eUIE4kEBASK8AgoORVZNVHJhbnNhY3Rpb24SYwoHbmV0d29yaxgBIAEoCUJSkkEyShsibmV0d29ya3MvZXRoZXJldW0tbWFpbm5ldCLKPhL6Ag9uYW1lPW5ldHdvcmtzLyriQQEC+kEWChRhcGkudXRpbGEuaW8vTmV0d29yaxIaCgxmcm9tX2FkZHJlc3MYAiABKAlCBOJBAQISGAoKdG9fYWRkcmVzcxgDIAEoCUIE4kEBARIXCgV2YWx1ZRgEIAEoCUII4kEBAYC1GAESLQoEZGF0YRgFIAEoCUIfkkEUShIiMHhkYTgyZmI0YzAwMDAwYSLiQQEBkLUYARJHCg9vdmVycmlkZV9wYXJhbXMYByABKAsyKC51dGlsYS5hcGkudjFhbHBoYTIuRVZNVHJhbnNhY3Rpb25QYXJhbXNCBOJBAQEiiAIKDUFzc2V0VHJhbnNmZXISYgoFYXNzZXQYASABKAlCU5JBNUogImFzc2V0cy9uYXRpdmUuZXRoZXJldW0tbWFpbm5ldCLKPhD6Ag1uYW1lPWFzc2V0cy8q4kEBAvpBFAoSYXBpLnV0aWxhLmlvL0Fzc2V0EiIKBmFtb3VudBgCIAEoCUISkkEHSgUiMS4xIuJBAQKItRgBEhQKBnNvdXJjZRgDIAEoCUIE4kEBAhIZCgtkZXN0aW5hdGlvbhgEIAEoCUIE4kEBAhImChNwYXlfZmVlX2Zyb21fYW1vdW50GAUgASgIQgTiQQEBSACIAQFCFgoUX3BheV9mZWVfZnJvbV9hbW91bnQizAIKEkJhdGNoQXNzZXRUcmFuc2ZlchJiCgVhc3NldBgBIAEoCUJTkkE1SiAiYXNzZXRzL25hdGl2ZS5ldGhlcmV1bS1tYWlubmV0Iso+EPoCDW5hbWU9YXNzZXRzLyriQQEC+kEUChJhcGkudXRpbGEuaW8vQXNzZXQSFAoGc291cmNlGAIgASgJQgTiQQECElsKDGRlc3RpbmF0aW9ucxgDIAMoCzI/LnV0aWxhLmFwaS52MWFscGhhMi5CYXRjaEFzc2V0VHJhbnNmZXIuQmF0Y2hUcmFuc2ZlckRlc3RpbmF0aW9uQgTiQQECGl8KGEJhdGNoVHJhbnNmZXJEZXN0aW5hdGlvbhIZCgtkZXN0aW5hdGlvbhgBIAEoCUIE4kEBAhIUCgZhbW91bnQYAiABKAlCBOJBAQISEgoEbm90ZRgDIAEoCUIE4kEBASJfCg9FVk1QZXJzb25hbFNpZ24SGgoMZnJvbV9hZGRyZXNzGAEgASgJQgTiQQECEhUKB21lc3NhZ2UYAiABKAlCBOJBAQESGQoLbWVzc2FnZV9oZXgYAyABKAlCBOJBAQEiRwoSRVZNU2lnblR5cGVkRGF0YVY0EhoKDGZyb21fYWRkcmVzcxgBIAEoCUIE4kEBAhIVCgdtZXNzYWdlGAIgASgJQgTiQQECIpUDChJFeGNoYW5nZVdpdGhkcmF3YWwSVwoFYXNzZXQYASABKAlCSJJBKkoVImFzc2V0cy9iaW5hbmNlLlVTREMiyj4Q+gINbmFtZT1hc3NldHMvKuJBAQL6QRQKEmFwaS51dGlsYS5pby9Bc3NldBIiCgZhbW91bnQYAiABKAlCEpJBB0oFIjEuMSLiQQECiLUYARJzCgZzb3VyY2UYAyABKAlCY5JBOEo2InZhdWx0cy8xYjI1NjM1YTViM2YvZXhjaGFuZ2VDb25uZWN0aW9ucy85NTI1N2M1YTUyMmYi4kEBAvpBIQofYXBpLnV0aWxhLmlvL0V4Y2hhbmdlQ29ubmVjdGlvbhJKCgtkZXN0aW5hdGlvbhgEIAEoCUI1kkEuSiwiMHhBMGI4Njk5MWM2MjE4YjM2YzFkMTlENGEyZTlFYjBjRTM2MDZlQjQ4IuJBAQISQQoTZGVzdGluYXRpb25fbmV0d29yaxgFIAEoCUIkkkEdShsibmV0d29ya3MvZXRoZXJldW0tbWFpbm5ldCLiQQECIsMFChFTb2xhbmFUcmFuc2FjdGlvbhILCgNmZWUYASABKAkSPgoHbWVzc2FnZRgCIAEoCzItLnV0aWxhLmFwaS52MWFscGhhMi5Tb2xhbmFUcmFuc2FjdGlvbi5NZXNzYWdlEhIKCnNpZ25hdHVyZXMYAyADKAkSSgoKc2VyaWFsaXplZBgFIAEoCzIwLnV0aWxhLmFwaS52MWFscGhhMi5Tb2xhbmFUcmFuc2FjdGlvbi5TZXJpYWxpemVkQgTiQQEEEhoKDHByaXZhdGVfa2V5cxgGIAMoCUIE4kEBBBIVCgduZXR3b3JrGAcgASgJQgTiQQECEhQKBnNvdXJjZRgIIAEoCUIE4kEBAhIUCgxhdXRvX3B1Ymxpc2gYCSABKAgagwMKB01lc3NhZ2USEAoIYWNjb3VudHMYASADKAkSRAoGaGVhZGVyGAIgASgLMjQudXRpbGEuYXBpLnYxYWxwaGEyLlNvbGFuYVRyYW5zYWN0aW9uLk1lc3NhZ2UuSGVhZGVyEk8KDGluc3RydWN0aW9ucxgDIAMoCzI5LnV0aWxhLmFwaS52MWFscGhhMi5Tb2xhbmFUcmFuc2FjdGlvbi5NZXNzYWdlLkluc3RydWN0aW9uEhkKEXJlY2VudF9ibG9ja19oYXNoGAQgASgJGmsKBkhlYWRlchIgChhyZWFkb25seV9zaWduZWRfYWNjb3VudHMYASABKAkSIgoacmVhZG9ubHlfdW5zaWduZWRfYWNjb3VudHMYAiABKAkSGwoTcmVxdWlyZWRfc2lnbmF0dXJlcxgDIAEoCRpHCgtJbnN0cnVjdGlvbhIQCghhY2NvdW50cxgBIAMoCRIMCgRkYXRhGAIgASgJEhgKEHByb2dyYW1faWRfaW5kZXgYAyABKAkaHAoKU2VyaWFsaXplZBIOCgZiYXNlNjQYASABKAkiswIKG1NlcmlhbGl6ZWRTb2xhbmFUcmFuc2FjdGlvbhJjCgduZXR3b3JrGAEgASgJQlKSQTJKGyJuZXR3b3Jrcy9ldGhlcmV1bS1tYWlubmV0Iso+EvoCD25hbWU9bmV0d29ya3MvKuJBAQL6QRYKFGFwaS51dGlsYS5pby9OZXR3b3JrEhQKBnNvdXJjZRgCIAEoCUIE4kEBAhIkChZiYXNlNjRfcmF3X3RyYW5zYWN0aW9uGAMgASgJQgTiQQECEhoKDGF1dG9fcHVibGlzaBgEIAEoCEIE4kEBARIaCgxwcml2YXRlX2tleXMYBSADKAlCBOJBAQESOwoRcmVwbGFjZV9ibG9ja2hhc2gYBiABKAsyGi5nb29nbGUucHJvdG9idWYuQm9vbFZhbHVlQgTiQQECIvoDChtJbml0aWF0ZVRyYW5zYWN0aW9uUmVzcG9uc2USNAoLdHJhbnNhY3Rpb24YASABKAsyHy51dGlsYS5hcGkudjFhbHBoYTIuVHJhbnNhY3Rpb24SZwoUcmVmZXJlbmNlZF9yZXNvdXJjZXMY6QcgAygLMkgudXRpbGEuYXBpLnYxYWxwaGEyLkluaXRpYXRlVHJhbnNhY3Rpb25SZXNwb25zZS5SZWZlcmVuY2VkUmVzb3VyY2VzRW50cnkScAoZcmVmZXJlbmNlZF9hZGRyZXNzZXNfaW5mbxjqByADKAsyTC51dGlsYS5hcGkudjFhbHBoYTIuSW5pdGlhdGVUcmFuc2FjdGlvblJlc3BvbnNlLlJlZmVyZW5jZWRBZGRyZXNzZXNJbmZvRW50cnkaYgoYUmVmZXJlbmNlZFJlc291cmNlc0VudHJ5EgsKA2tleRgBIAEoCRI1CgV2YWx1ZRgCIAEoCzImLnV0aWxhLmFwaS52MWFscGhhMi5SZWZlcmVuY2VkUmVzb3VyY2U6AjgBGmYKHFJlZmVyZW5jZWRBZGRyZXNzZXNJbmZvRW50cnkSCwoDa2V5GAEgASgJEjUKBXZhbHVlGAIgASgLMiYudXRpbGEuYXBpLnYxYWxwaGEyLk5ldHdvcmtBZGRyZXNzSW5mbzoCOAFCKloodXRpbGEuaW8vZ2VucHJvdG8vYXBpL3YxYWxwaGEyO2FwaXYxYTJwYmIGcHJvdG8z", [file_google_api_field_behavior, file_google_api_resource, file_google_api_visibility, file_google_protobuf_descriptor, file_google_protobuf_wrappers, file_protoc_gen_openapiv2_options_annotations, file_utila_api_v1_api, file_utila_api_v1alpha2_resources, file_utila_api_v1alpha2_transactiondef, file_utila_api_v1alpha2_types]);

/**
 * @generated from message utila.api.v1alpha2.InitiateTransactionRequest
 */
export type InitiateTransactionRequest = Message<"utila.api.v1alpha2.InitiateTransactionRequest"> & {
  /**
   * The parent vault resource where this transaction will be created.
   *
   * Format: `vaults/{vault_id}`
   *
   * @generated from field: string parent = 1;
   */
  parent: string;

  /**
   * Input to create the transaction.
   *
   * Choose one of the available messages.
   *
   * @generated from field: utila.api.v1alpha2.InitiateTransactionRequest.Details details = 2;
   */
  details?: InitiateTransactionRequest_Details;

  /**
   * @generated from field: utila.api.v1alpha2.TransactionPriority.Enum priority = 3;
   */
  priority: TransactionPriority_Enum;

  /**
   * A note to attach to the transaction.
   *
   * This note will be visible to all vault members.
   *
   * @generated from field: string note = 4;
   */
  note: string;

  /**
   * If the transaction is designated to be signed by a specific signer, this field should be set.
   *
   * Format: `users/{email}` or `users/{id}`
   *
   * Example: `["users/name@example.com"]` or `["users/a3e4f5"]`
   *
   * @generated from field: repeated string designated_signers = 7;
   */
  designatedSigners: string[];

  /**
   * If set to true, the transaction will be validated but not created.
   *
   * @generated from field: bool validate_only = 5;
   */
  validateOnly: boolean;

  /**
   * An optional request ID to identify requests. Specify a unique request ID
   * so that if you must retry your request, the server will know to ignore
   * the request if it has already been completed. The server will guarantee
   * that for at least 60 minutes after the first request.
   *
   * The request ID must be a valid UUID with the exception that zero UUID is
   * not supported (00000000-0000-0000-0000-000000000000).
   * (-- api-linter: core::0155::request-id-format=disabled
   *     aip.dev/not-precedent: endpoint deployment doesn't work. --)
   *
   * @generated from field: string request_id = 6;
   */
  requestId: string;

  /**
   * Run a simulation against a blockchain node to get the estimated execution results of the transaction like balance changes.
   *
   * @generated from field: bool run_simulation = 8;
   */
  runSimulation: boolean;

  /**
   * Internal message.
   *
   * @generated from field: bool include_referenced_resources = 100;
   */
  includeReferencedResources: boolean;
};

/**
 * Describes the message utila.api.v1alpha2.InitiateTransactionRequest.
 * Use `create(InitiateTransactionRequestSchema)` to create a new message.
 */
export const InitiateTransactionRequestSchema: GenMessage<InitiateTransactionRequest> = /*@__PURE__*/
  messageDesc(file_utila_api_v1alpha2_initiatetx, 0);

/**
 * @generated from message utila.api.v1alpha2.InitiateTransactionRequest.Details
 */
export type InitiateTransactionRequest_Details = Message<"utila.api.v1alpha2.InitiateTransactionRequest.Details"> & {
  /**
   * @generated from oneof utila.api.v1alpha2.InitiateTransactionRequest.Details.details
   */
  details: {
    /**
     * An abstract transfer.
     *
     * @generated from field: utila.api.v1alpha2.AssetTransfer asset_transfer = 3;
     */
    value: AssetTransfer;
    case: "assetTransfer";
  } | {
    /**
     * A batch transfer.
     *
     * @generated from field: utila.api.v1alpha2.BatchAssetTransfer asset_batch_transfer = 4;
     */
    value: BatchAssetTransfer;
    case: "assetBatchTransfer";
  } | {
    /**
     * An EVM transaction.
     *
     * @generated from field: utila.api.v1alpha2.EVMTransaction evm_transaction = 2;
     */
    value: EVMTransaction;
    case: "evmTransaction";
  } | {
    /**
     * An EVM personal sign message.
     *
     * @generated from field: utila.api.v1alpha2.EVMPersonalSign evm_personal_sign = 5;
     */
    value: EVMPersonalSign;
    case: "evmPersonalSign";
  } | {
    /**
     * An EVM sign typed data V4 message.
     *
     * @generated from field: utila.api.v1alpha2.EVMSignTypedDataV4 evm_sign_typed_data_v4 = 6;
     */
    value: EVMSignTypedDataV4;
    case: "evmSignTypedDataV4";
  } | {
    /**
     * An exchange withdrawal.
     *
     * @generated from field: utila.api.v1alpha2.ExchangeWithdrawal exchange_withdrawal = 7;
     */
    value: ExchangeWithdrawal;
    case: "exchangeWithdrawal";
  } | {
    /**
     * A Solana transaction.
     *
     * @generated from field: utila.api.v1alpha2.SolanaTransaction solana_transaction = 8;
     */
    value: SolanaTransaction;
    case: "solanaTransaction";
  } | {
    /**
     * A serialized Solana transaction.
     *
     * @generated from field: utila.api.v1alpha2.SerializedSolanaTransaction serialized_solana_transaction = 9;
     */
    value: SerializedSolanaTransaction;
    case: "serializedSolanaTransaction";
  } | { case: undefined; value?: undefined };
};

/**
 * Describes the message utila.api.v1alpha2.InitiateTransactionRequest.Details.
 * Use `create(InitiateTransactionRequest_DetailsSchema)` to create a new message.
 */
export const InitiateTransactionRequest_DetailsSchema: GenMessage<InitiateTransactionRequest_Details> = /*@__PURE__*/
  messageDesc(file_utila_api_v1alpha2_initiatetx, 0, 0);

/**
 * A message for internal use only. This field is not visible to the client.
 *
 * @generated from message utila.api.v1alpha2.InitiateTransactionRequest.Utila
 */
export type InitiateTransactionRequest_Utila = Message<"utila.api.v1alpha2.InitiateTransactionRequest.Utila"> & {
  /**
   * @generated from field: optional string extension_info = 1;
   */
  extensionInfo?: string;
};

/**
 * Describes the message utila.api.v1alpha2.InitiateTransactionRequest.Utila.
 * Use `create(InitiateTransactionRequest_UtilaSchema)` to create a new message.
 */
export const InitiateTransactionRequest_UtilaSchema: GenMessage<InitiateTransactionRequest_Utila> = /*@__PURE__*/
  messageDesc(file_utila_api_v1alpha2_initiatetx, 0, 1);

/**
 * (-- XXX - This request resembles InitiateTransactionRequest. Consider merging them. --)
 *
 * @generated from message utila.api.v1alpha2.EstimateTransactionFeeRequest
 */
export type EstimateTransactionFeeRequest = Message<"utila.api.v1alpha2.EstimateTransactionFeeRequest"> & {
  /**
   * The parent vault resource where this transaction will be created.
   *
   * Format: `vaults/{vault_id}`
   *
   * @generated from field: string parent = 1;
   */
  parent: string;

  /**
   * Input to estimate the transaction fee.
   *
   * Choose one of the available messages.
   *
   * @generated from field: utila.api.v1alpha2.EstimateTransactionFeeRequest.Details details = 2;
   */
  details?: EstimateTransactionFeeRequest_Details;

  /**
   * Priority
   *
   * @generated from field: utila.api.v1alpha2.TransactionPriority.Enum priority = 3;
   */
  priority: TransactionPriority_Enum;
};

/**
 * Describes the message utila.api.v1alpha2.EstimateTransactionFeeRequest.
 * Use `create(EstimateTransactionFeeRequestSchema)` to create a new message.
 */
export const EstimateTransactionFeeRequestSchema: GenMessage<EstimateTransactionFeeRequest> = /*@__PURE__*/
  messageDesc(file_utila_api_v1alpha2_initiatetx, 1);

/**
 * Transaction type
 *
 * @generated from message utila.api.v1alpha2.EstimateTransactionFeeRequest.Details
 */
export type EstimateTransactionFeeRequest_Details = Message<"utila.api.v1alpha2.EstimateTransactionFeeRequest.Details"> & {
  /**
   * @generated from oneof utila.api.v1alpha2.EstimateTransactionFeeRequest.Details.details
   */
  details: {
    /**
     * An abstract transfer.
     *
     * @generated from field: utila.api.v1alpha2.AssetTransfer asset_transfer = 3;
     */
    value: AssetTransfer;
    case: "assetTransfer";
  } | {
    /**
     * A batch transfer.
     *
     * @generated from field: utila.api.v1alpha2.BatchAssetTransfer asset_batch_transfer = 4;
     */
    value: BatchAssetTransfer;
    case: "assetBatchTransfer";
  } | {
    /**
     * An EVM transaction.
     *
     * @generated from field: utila.api.v1alpha2.EVMTransaction evm_transaction = 2;
     */
    value: EVMTransaction;
    case: "evmTransaction";
  } | {
    /**
     * A Solana transaction.
     *
     * @generated from field: utila.api.v1alpha2.SolanaTransaction solana_transaction = 8;
     */
    value: SolanaTransaction;
    case: "solanaTransaction";
  } | { case: undefined; value?: undefined };
};

/**
 * Describes the message utila.api.v1alpha2.EstimateTransactionFeeRequest.Details.
 * Use `create(EstimateTransactionFeeRequest_DetailsSchema)` to create a new message.
 */
export const EstimateTransactionFeeRequest_DetailsSchema: GenMessage<EstimateTransactionFeeRequest_Details> = /*@__PURE__*/
  messageDesc(file_utila_api_v1alpha2_initiatetx, 1, 0);

/**
 * @generated from message utila.api.v1alpha2.EstimateTransactionFeeResponse
 */
export type EstimateTransactionFeeResponse = Message<"utila.api.v1alpha2.EstimateTransactionFeeResponse"> & {
  /**
   * Network specific fee details.
   *
   * @generated from oneof utila.api.v1alpha2.EstimateTransactionFeeResponse.fee_details
   */
  feeDetails: {
    /**
     * @generated from field: utila.api.v1alpha2.EVMFeeEstimation evm_fee = 1;
     */
    value: EVMFeeEstimation;
    case: "evmFee";
  } | { case: undefined; value?: undefined };

  /**
   * The estimated total fee for the transaction.
   *
   * @generated from field: string total_fee = 3;
   */
  totalFee: string;

  /**
   * The estimated total fee for the transaction, converted to fiat currency.
   *
   * @generated from field: utila.api.v1alpha2.ConvertedValue converted_total_fee = 5;
   */
  convertedTotalFee?: ConvertedValue;
};

/**
 * Describes the message utila.api.v1alpha2.EstimateTransactionFeeResponse.
 * Use `create(EstimateTransactionFeeResponseSchema)` to create a new message.
 */
export const EstimateTransactionFeeResponseSchema: GenMessage<EstimateTransactionFeeResponse> = /*@__PURE__*/
  messageDesc(file_utila_api_v1alpha2_initiatetx, 2);

/**
 * @generated from message utila.api.v1alpha2.EVMFeeEstimation
 */
export type EVMFeeEstimation = Message<"utila.api.v1alpha2.EVMFeeEstimation"> & {
  /**
   * The estimated gas to be used by the transaction (actual gas used may vary).
   *
   * @generated from field: string gas_used = 1;
   */
  gasUsed: string;

  /**
   * The estimated current gas price, in wei.
   *
   * @generated from field: string gas_price = 2;
   */
  gasPrice: string;
};

/**
 * Describes the message utila.api.v1alpha2.EVMFeeEstimation.
 * Use `create(EVMFeeEstimationSchema)` to create a new message.
 */
export const EVMFeeEstimationSchema: GenMessage<EVMFeeEstimation> = /*@__PURE__*/
  messageDesc(file_utila_api_v1alpha2_initiatetx, 3);

/**
 * @generated from message utila.api.v1alpha2.TransactionPriority
 */
export type TransactionPriority = Message<"utila.api.v1alpha2.TransactionPriority"> & {
};

/**
 * Describes the message utila.api.v1alpha2.TransactionPriority.
 * Use `create(TransactionPrioritySchema)` to create a new message.
 */
export const TransactionPrioritySchema: GenMessage<TransactionPriority> = /*@__PURE__*/
  messageDesc(file_utila_api_v1alpha2_initiatetx, 4);

/**
 * Generic priority enum for transactions.
 * Translates to network specific priority values.
 *
 * @generated from enum utila.api.v1alpha2.TransactionPriority.Enum
 */
export enum TransactionPriority_Enum {
  /**
   * Unspecified priority.
   *
   * @generated from enum value: ENUM_UNSPECIFIED = 0;
   */
  ENUM_UNSPECIFIED = 0,

  /**
   * Low priority.
   *
   * @generated from enum value: LOW = 1;
   */
  LOW = 1,

  /**
   * Normal priority. The default value.
   *
   * @generated from enum value: NORMAL = 2;
   */
  NORMAL = 2,

  /**
   * High priority.
   *
   * @generated from enum value: HIGH = 3;
   */
  HIGH = 3,
}

/**
 * Describes the enum utila.api.v1alpha2.TransactionPriority.Enum.
 */
export const TransactionPriority_EnumSchema: GenEnum<TransactionPriority_Enum> = /*@__PURE__*/
  enumDesc(file_utila_api_v1alpha2_initiatetx, 4, 0);

/**
 * @generated from message utila.api.v1alpha2.EVMPriority
 */
export type EVMPriority = Message<"utila.api.v1alpha2.EVMPriority"> & {
  /**
   * The amount of gas to use for the transaction.
   *
   * @generated from field: optional int64 gas_limit = 1;
   */
  gasLimit?: bigint;

  /**
   * A `0x`-prefixed hex string representing the gas price of the transaction.
   *
   * Used for legacy transactions (non EIP-1559).
   *
   * @generated from field: string gas_price = 2;
   */
  gasPrice: string;

  /**
   * A `0x`-prefixed hex string representing the maximum prioriy fee per gas unit the transaction can pay.
   *
   * Used for dynamic transactions (EIP-1559).
   *
   * @generated from field: string max_priority_fee_per_gas = 3;
   */
  maxPriorityFeePerGas: string;

  /**
   * A `0x`-prefixed hex string representing the maximum fee per gas unit the transaction can pay.
   *
   * Used for dynamic transactions (EIP-1559).
   *
   * @generated from field: string max_fee_per_gas = 4;
   */
  maxFeePerGas: string;
};

/**
 * Describes the message utila.api.v1alpha2.EVMPriority.
 * Use `create(EVMPrioritySchema)` to create a new message.
 */
export const EVMPrioritySchema: GenMessage<EVMPriority> = /*@__PURE__*/
  messageDesc(file_utila_api_v1alpha2_initiatetx, 5);

/**
 * @generated from message utila.api.v1alpha2.EVMTransactionParams
 */
export type EVMTransactionParams = Message<"utila.api.v1alpha2.EVMTransactionParams"> & {
  /**
   * Custom gas settings. Used only if generic priority is not set.
   *
   * @generated from field: utila.api.v1alpha2.EVMPriority gas_settings = 6;
   */
  gasSettings?: EVMPriority;
};

/**
 * Describes the message utila.api.v1alpha2.EVMTransactionParams.
 * Use `create(EVMTransactionParamsSchema)` to create a new message.
 */
export const EVMTransactionParamsSchema: GenMessage<EVMTransactionParams> = /*@__PURE__*/
  messageDesc(file_utila_api_v1alpha2_initiatetx, 6);

/**
 * @generated from message utila.api.v1alpha2.EVMTransaction
 */
export type EVMTransaction = Message<"utila.api.v1alpha2.EVMTransaction"> & {
  /**
   * The resource name of the network of the transaction.
   *
   * Format: `networks/{network_id}`.
   *
   * @generated from field: string network = 1;
   */
  network: string;

  /**
   * The source of the transaction.
   *
   * Can be one of the following:
   * 1. A `0x`-prefixed hex string address, (example: `0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48`)
   * 2. An EVM wallet resource name: `vaults/{vault_id}/wallets/{wallet_id}`
   * 3. A specific wallet address: `vaults/{vault_id}/wallets/{wallet_id}/addresses/{address_id}`
   * (-- api-linter: core::0140::prepositions=disabled
   *     aip.dev/not-precedent: `from` is a popular term in EVM APIs. --)
   *
   * @generated from field: string from_address = 2;
   */
  fromAddress: string;

  /**
   * The destination of the transfer.
   *
   * If empty, the transaction is a contract deployment.
   *
   * Can be one of the following:
   * 1. A `0x`-prefixed hex string address (example: `0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48`)
   * 2. A wallet: `vaults/{vault_id}/wallets/{wallet_id}`.
   * 3. A specific wallet address: `vaults/{vault_id}/wallets/{wallet_id}/addresses/{address_id}`.
   * (-- api-linter: core::0140::prepositions=disabled
   *     aip.dev/not-precedent: `to` is a popular term in EVM APIs. --)
   *
   * @generated from field: string to_address = 3;
   */
  toAddress: string;

  /**
   * The amount to transfer in wei. Can be hex or decimal.
   *
   * Example: `0x32` or `50`.
   *
   * @generated from field: string value = 4;
   */
  value: string;

  /**
   * Hex encoded transaction data, must be prefixed with `0x`.
   *
   * Example: `0xda82fb4c00000a`.
   *
   * @generated from field: string data = 5;
   */
  data: string;

  /**
   * Advanced parameters.
   *
   * @generated from field: utila.api.v1alpha2.EVMTransactionParams override_params = 7;
   */
  overrideParams?: EVMTransactionParams;
};

/**
 * Describes the message utila.api.v1alpha2.EVMTransaction.
 * Use `create(EVMTransactionSchema)` to create a new message.
 */
export const EVMTransactionSchema: GenMessage<EVMTransaction> = /*@__PURE__*/
  messageDesc(file_utila_api_v1alpha2_initiatetx, 7);

/**
 * @generated from message utila.api.v1alpha2.AssetTransfer
 */
export type AssetTransfer = Message<"utila.api.v1alpha2.AssetTransfer"> & {
  /**
   * The asset to transfer.
   *
   * Can be one of the following:
   * 1. A raw asset name `assets/{asset_id}` (example: `assets/e72ff35a5b15`)
   * 2. A native asset name `assets/native.{network_id}` (example: `assets/native.ethereum-mainnet`)
   * 3. An ERC20 asset name `assets/erc20.{network_id}.{contract}` (example: `assets/erc20.ethereum-mainnet.0x6b175474e89094c44da98b954eedeac495271d0f`)
   * 4. A TRC20 asset name `assets/trc20.{network_id}.{contract}` (example: `assets/trc20.tron-mainnet.TKieffkQXtW8Dr1hKXKGPqCqYi1UNMjJw`)
   *
   * @generated from field: string asset = 1;
   */
  asset: string;

  /**
   * The amount of the asset to transfer in asset units.
   *
   * Example: `1.1`.
   *
   * @generated from field: string amount = 2;
   */
  amount: string;

  /**
   * The source of the transfer.
   *
   * Can be one of the following:
   * 1. A raw string address, (example: `0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48`)
   * 2. A wallet containing the asset: `vaults/{vault_id}/wallets/{wallet_id}`
   * 3. A specific wallet address containing the asset: `vaults/{vault_id}/wallets/{wallet_id}/addresses/{address_id}`
   *
   * For Bitcoin, only wallet source is supported (the second option).
   *
   * @generated from field: string source = 3;
   */
  source: string;

  /**
   * The destination of the transfer.
   *
   * Can be one of the following:
   * 1. A raw string address (example: `0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48` or `bc1q3vfght7rln2c3733dl42navt8pslfya7talfns`)
   * 2. A wallet: `vaults/{vault_id}/wallets/{wallet_id}`.
   * 3. A specific wallet address: `vaults/{vault_id}/wallets/{wallet_id}/addresses/{address_id}`.
   *
   * @generated from field: string destination = 4;
   */
  destination: string;

  /**
   * If set to true, fees will be paid from transfer amount.
   *
   * Currently only supported for native assets on EVM-compatible networks.
   * (-- api-linter: core::0140::prepositions=disabled
   *     aip.dev/not-precedent: `from` makes sense here --)
   *
   * @generated from field: optional bool pay_fee_from_amount = 5;
   */
  payFeeFromAmount?: boolean;
};

/**
 * Describes the message utila.api.v1alpha2.AssetTransfer.
 * Use `create(AssetTransferSchema)` to create a new message.
 */
export const AssetTransferSchema: GenMessage<AssetTransfer> = /*@__PURE__*/
  messageDesc(file_utila_api_v1alpha2_initiatetx, 8);

/**
 * @generated from message utila.api.v1alpha2.BatchAssetTransfer
 */
export type BatchAssetTransfer = Message<"utila.api.v1alpha2.BatchAssetTransfer"> & {
  /**
   * The asset to transfer.
   *
   * Can be one of the following:
   * 1. A raw asset name `assets/{asset_id}` (example: `assets/e72ff35a5b15`)
   * 2. A native asset name `assets/native.{network_id}` (example: `assets/native.ethereum-mainnet`)
   * 3. An ERC20 asset name `assets/erc20.{network_id}.{contract}` (example: `assets/erc20.ethereum-mainnet.0x6b175474e89094c44da98b954eedeac495271d0f`)
   *
   * Supported Assets: The native currency of the network and ERC20 tokens.
   *
   *  **Note: ERC20 asset transfers require an approval. See [GetLatestBatchContract](#tag/Blockchains/operation/Blockchains_GetLatestBatchContract) for more information.**
   *
   *
   * Supported Networks: Ethereum and Polygon (Sepolia and Mumbai)
   *
   * @generated from field: string asset = 1;
   */
  asset: string;

  /**
   * The source of the transfer.
   *
   * Can be one of the following:
   * 1. A raw string address, (example: `0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48`)
   * 2. A wallet containing the asset: `vaults/{vault_id}/wallets/{wallet_id}`
   * 3. A specific wallet address containing the asset: `vaults/{vault_id}/wallets/{wallet_id}/addresses/{address_id}`
   *
   * For Bitcoin, only wallet source is supported (the second option).
   *
   * @generated from field: string source = 2;
   */
  source: string;

  /**
   * The batch transfer destinations.
   *
   * @generated from field: repeated utila.api.v1alpha2.BatchAssetTransfer.BatchTransferDestination destinations = 3;
   */
  destinations: BatchAssetTransfer_BatchTransferDestination[];
};

/**
 * Describes the message utila.api.v1alpha2.BatchAssetTransfer.
 * Use `create(BatchAssetTransferSchema)` to create a new message.
 */
export const BatchAssetTransferSchema: GenMessage<BatchAssetTransfer> = /*@__PURE__*/
  messageDesc(file_utila_api_v1alpha2_initiatetx, 9);

/**
 * BatchTransferDestination
 *
 * @generated from message utila.api.v1alpha2.BatchAssetTransfer.BatchTransferDestination
 */
export type BatchAssetTransfer_BatchTransferDestination = Message<"utila.api.v1alpha2.BatchAssetTransfer.BatchTransferDestination"> & {
  /**
   * The destination of the transfer.
   *
   * Can be one of the following:
   * 1. A raw string address (example: `0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48` or `bc1q3vfght7rln2c3733dl42navt8pslfya7talfns`)
   * 2. A wallet: `vaults/{vault_id}/wallets/{wallet_id}`.
   * 3. A specific wallet address: `vaults/{vault_id}/wallets/{wallet_id}/addresses/{address_id}`.
   *
   * @generated from field: string destination = 1;
   */
  destination: string;

  /**
   * The amount of the asset to transfer for this entry in asset units.
   *
   * Example: `1.1`.
   *
   * @generated from field: string amount = 2;
   */
  amount: string;

  /**
   * The note to attach to the transfer.
   *
   * This note will be visible to all vault members.
   *
   * @generated from field: string note = 3;
   */
  note: string;
};

/**
 * Describes the message utila.api.v1alpha2.BatchAssetTransfer.BatchTransferDestination.
 * Use `create(BatchAssetTransfer_BatchTransferDestinationSchema)` to create a new message.
 */
export const BatchAssetTransfer_BatchTransferDestinationSchema: GenMessage<BatchAssetTransfer_BatchTransferDestination> = /*@__PURE__*/
  messageDesc(file_utila_api_v1alpha2_initiatetx, 9, 0);

/**
 * @generated from message utila.api.v1alpha2.EVMPersonalSign
 */
export type EVMPersonalSign = Message<"utila.api.v1alpha2.EVMPersonalSign"> & {
  /**
   * The address to sign the message with.
   *
   * Can be one of the following:
   * 1. A `0x`-prefixed hex string address, must be matched by a wallet address in the current vault (example: `0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48`)
   * 2. A wallet resource name: `vaults/{vault_id}/wallets/{wallet_id}`
   * 3. A specific wallet address resource name: `vaults/{vault_id}/wallets/{wallet_id}/addresses/{address_id}`
   * (-- api-linter: core::0140::prepositions=disabled
   *     aip.dev/not-precedent: `from` is a popular term in EVM APIs. --)
   *
   * @generated from field: string from_address = 1;
   */
  fromAddress: string;

  /**
   * A utf-8 encoded message to sign.
   *
   * One of `message`, `messageHex` is required.
   *
   * Example: `hello`.
   *
   * @generated from field: string message = 2;
   */
  message: string;

  /**
   * A utf-8 hex encoded message to sign, must start with `0x`.
   *
   * One of `message`, `messageHex` is required.
   *
   * Example: `0x68656c6c6f` (representing `hello`)
   *
   * @generated from field: string message_hex = 3;
   */
  messageHex: string;
};

/**
 * Describes the message utila.api.v1alpha2.EVMPersonalSign.
 * Use `create(EVMPersonalSignSchema)` to create a new message.
 */
export const EVMPersonalSignSchema: GenMessage<EVMPersonalSign> = /*@__PURE__*/
  messageDesc(file_utila_api_v1alpha2_initiatetx, 10);

/**
 * @generated from message utila.api.v1alpha2.EVMSignTypedDataV4
 */
export type EVMSignTypedDataV4 = Message<"utila.api.v1alpha2.EVMSignTypedDataV4"> & {
  /**
   * The address to sign the message with.
   *
   * Can be one of the following:
   * 1. A `0x`-prefixed hex string address, must be matched by a wallet address in the current vault (example: `0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48`)
   * 2. A wallet resource name: `vaults/{vault_id}/wallets/{wallet_id}`
   * 3. A specific wallet address resource name: `vaults/{vault_id}/wallets/{wallet_id}/addresses/{address_id}`
   * (-- api-linter: core::0140::prepositions=disabled
   *     aip.dev/not-precedent: `from` is a popular term in EVM APIs. --)
   *
   * @generated from field: string from_address = 1;
   */
  fromAddress: string;

  /**
   * An EIP-712 json string.
   *
   * See https://eips.ethereum.org/EIPS/eip-712 for more information.
   *
   * @generated from field: string message = 2;
   */
  message: string;
};

/**
 * Describes the message utila.api.v1alpha2.EVMSignTypedDataV4.
 * Use `create(EVMSignTypedDataV4Schema)` to create a new message.
 */
export const EVMSignTypedDataV4Schema: GenMessage<EVMSignTypedDataV4> = /*@__PURE__*/
  messageDesc(file_utila_api_v1alpha2_initiatetx, 11);

/**
 * @generated from message utila.api.v1alpha2.ExchangeWithdrawal
 */
export type ExchangeWithdrawal = Message<"utila.api.v1alpha2.ExchangeWithdrawal"> & {
  /**
   * The asset to withdraw. Must be an exchange asset.
   *
   * Format: `assets/{exchange}.{symbol}`
   * Example: `assets/binance.USDC`
   *
   * @generated from field: string asset = 1;
   */
  asset: string;

  /**
   * The amount of the asset to withdraw in asset units.
   *
   * @generated from field: string amount = 2;
   */
  amount: string;

  /**
   * The source of the withdrawal. Specifies the exchange connection to withdraw from.
   * The source should be a valid exchange connection resource name in the current vault (shown in the Console).
   * The main account of the exchange connection will be used for the withdrawal.
   *
   * Format: `vaults/{vault_id}/exchangeConnections/{exchange_connection_id}`
   *
   * @generated from field: string source = 3;
   */
  source: string;

  /**
   * The destination of the transfer.
   *
   * Can be one of the following:
   * 1. A raw string address (example: `0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48` or `bc1q3vfght7rln2c3733dl42navt8pslfya7talfns`)
   * 2. A wallet: `vaults/{vault_id}/wallets/{wallet_id}`.
   * 3. A specific wallet address: `vaults/{vault_id}/wallets/{wallet_id}/addresses/{address_id}`.
   *
   * **Must be an address managed by the current vault.**
   *
   * @generated from field: string destination = 4;
   */
  destination: string;

  /**
   * The destination network of the transfer.
   *
   * @generated from field: string destination_network = 5;
   */
  destinationNetwork: string;
};

/**
 * Describes the message utila.api.v1alpha2.ExchangeWithdrawal.
 * Use `create(ExchangeWithdrawalSchema)` to create a new message.
 */
export const ExchangeWithdrawalSchema: GenMessage<ExchangeWithdrawal> = /*@__PURE__*/
  messageDesc(file_utila_api_v1alpha2_initiatetx, 12);

/**
 * (-- api-linter: core::0203::field-behavior-required=disabled
 *     aip.dev/not-precedent: TODO --)
 *
 * @generated from message utila.api.v1alpha2.SolanaTransaction
 */
export type SolanaTransaction = Message<"utila.api.v1alpha2.SolanaTransaction"> & {
  /**
   * @generated from field: string fee = 1;
   */
  fee: string;

  /**
   * @generated from field: utila.api.v1alpha2.SolanaTransaction.Message message = 2;
   */
  message?: SolanaTransaction_Message;

  /**
   * @generated from field: repeated string signatures = 3;
   */
  signatures: string[];

  /**
   * @generated from field: utila.api.v1alpha2.SolanaTransaction.Serialized serialized = 5;
   */
  serialized?: SolanaTransaction_Serialized;

  /**
   * @generated from field: repeated string private_keys = 6;
   */
  privateKeys: string[];

  /**
   * @generated from field: string network = 7;
   */
  network: string;

  /**
   * @generated from field: string source = 8;
   */
  source: string;

  /**
   * @generated from field: bool auto_publish = 9;
   */
  autoPublish: boolean;
};

/**
 * Describes the message utila.api.v1alpha2.SolanaTransaction.
 * Use `create(SolanaTransactionSchema)` to create a new message.
 */
export const SolanaTransactionSchema: GenMessage<SolanaTransaction> = /*@__PURE__*/
  messageDesc(file_utila_api_v1alpha2_initiatetx, 13);

/**
 * @generated from message utila.api.v1alpha2.SolanaTransaction.Message
 */
export type SolanaTransaction_Message = Message<"utila.api.v1alpha2.SolanaTransaction.Message"> & {
  /**
   * @generated from field: repeated string accounts = 1;
   */
  accounts: string[];

  /**
   * @generated from field: utila.api.v1alpha2.SolanaTransaction.Message.Header header = 2;
   */
  header?: SolanaTransaction_Message_Header;

  /**
   * @generated from field: repeated utila.api.v1alpha2.SolanaTransaction.Message.Instruction instructions = 3;
   */
  instructions: SolanaTransaction_Message_Instruction[];

  /**
   * @generated from field: string recent_block_hash = 4;
   */
  recentBlockHash: string;
};

/**
 * Describes the message utila.api.v1alpha2.SolanaTransaction.Message.
 * Use `create(SolanaTransaction_MessageSchema)` to create a new message.
 */
export const SolanaTransaction_MessageSchema: GenMessage<SolanaTransaction_Message> = /*@__PURE__*/
  messageDesc(file_utila_api_v1alpha2_initiatetx, 13, 0);

/**
 * @generated from message utila.api.v1alpha2.SolanaTransaction.Message.Header
 */
export type SolanaTransaction_Message_Header = Message<"utila.api.v1alpha2.SolanaTransaction.Message.Header"> & {
  /**
   * @generated from field: string readonly_signed_accounts = 1;
   */
  readonlySignedAccounts: string;

  /**
   * @generated from field: string readonly_unsigned_accounts = 2;
   */
  readonlyUnsignedAccounts: string;

  /**
   * @generated from field: string required_signatures = 3;
   */
  requiredSignatures: string;
};

/**
 * Describes the message utila.api.v1alpha2.SolanaTransaction.Message.Header.
 * Use `create(SolanaTransaction_Message_HeaderSchema)` to create a new message.
 */
export const SolanaTransaction_Message_HeaderSchema: GenMessage<SolanaTransaction_Message_Header> = /*@__PURE__*/
  messageDesc(file_utila_api_v1alpha2_initiatetx, 13, 0, 0);

/**
 * @generated from message utila.api.v1alpha2.SolanaTransaction.Message.Instruction
 */
export type SolanaTransaction_Message_Instruction = Message<"utila.api.v1alpha2.SolanaTransaction.Message.Instruction"> & {
  /**
   * @generated from field: repeated string accounts = 1;
   */
  accounts: string[];

  /**
   * @generated from field: string data = 2;
   */
  data: string;

  /**
   * @generated from field: string program_id_index = 3;
   */
  programIdIndex: string;
};

/**
 * Describes the message utila.api.v1alpha2.SolanaTransaction.Message.Instruction.
 * Use `create(SolanaTransaction_Message_InstructionSchema)` to create a new message.
 */
export const SolanaTransaction_Message_InstructionSchema: GenMessage<SolanaTransaction_Message_Instruction> = /*@__PURE__*/
  messageDesc(file_utila_api_v1alpha2_initiatetx, 13, 0, 1);

/**
 * @generated from message utila.api.v1alpha2.SolanaTransaction.Serialized
 */
export type SolanaTransaction_Serialized = Message<"utila.api.v1alpha2.SolanaTransaction.Serialized"> & {
  /**
   * @generated from field: string base64 = 1;
   */
  base64: string;
};

/**
 * Describes the message utila.api.v1alpha2.SolanaTransaction.Serialized.
 * Use `create(SolanaTransaction_SerializedSchema)` to create a new message.
 */
export const SolanaTransaction_SerializedSchema: GenMessage<SolanaTransaction_Serialized> = /*@__PURE__*/
  messageDesc(file_utila_api_v1alpha2_initiatetx, 13, 1);

/**
 * (-- api-linter: core::0140::base64=disabled
 *     aip.dev/not-precedent: the type used in the go client is string --)
 *
 * @generated from message utila.api.v1alpha2.SerializedSolanaTransaction
 */
export type SerializedSolanaTransaction = Message<"utila.api.v1alpha2.SerializedSolanaTransaction"> & {
  /**
   * The resource name of the network of the transaction.
   *
   * Format: `networks/{network_id}`.
   *
   * @generated from field: string network = 1;
   */
  network: string;

  /**
   * The source of the transfer.
   *
   * Can be one of the following:
   * 1. A raw string address, (example: `0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48`)
   * 2. A wallet containing the asset: `vaults/{vault_id}/wallets/{wallet_id}`
   * 3. A specific wallet address containing the asset: `vaults/{vault_id}/wallets/{wallet_id}/addresses/{address_id}`
   *
   * For Bitcoin, only wallet source is supported (the second option).
   *
   * @generated from field: string source = 2;
   */
  source: string;

  /**
   * The transaction encoded in base64.
   *
   * @generated from field: string base64_raw_transaction = 3;
   */
  base64RawTransaction: string;

  /**
   * If set to true, the transaction will be published to the network by utila once signed.
   *
   * @generated from field: bool auto_publish = 4;
   */
  autoPublish: boolean;

  /**
   * List of ephemeral private keys required to sign the transaction.
   *
   * @generated from field: repeated string private_keys = 5;
   */
  privateKeys: string[];

  /**
   * If set to true, the transaction recent blockhash will be replaced with the most recent blockhash before signing.
   *
   * @generated from field: google.protobuf.BoolValue replace_blockhash = 6;
   */
  replaceBlockhash?: boolean;
};

/**
 * Describes the message utila.api.v1alpha2.SerializedSolanaTransaction.
 * Use `create(SerializedSolanaTransactionSchema)` to create a new message.
 */
export const SerializedSolanaTransactionSchema: GenMessage<SerializedSolanaTransaction> = /*@__PURE__*/
  messageDesc(file_utila_api_v1alpha2_initiatetx, 14);

/**
 * @generated from message utila.api.v1alpha2.InitiateTransactionResponse
 */
export type InitiateTransactionResponse = Message<"utila.api.v1alpha2.InitiateTransactionResponse"> & {
  /**
   * The created transaction.
   *
   * @generated from field: utila.api.v1alpha2.Transaction transaction = 1;
   */
  transaction?: Transaction;

  /**
   * A mapping of the referenced resources in the message.
   * The key is the resource name and the value is the corresponding resource.
   *
   * @generated from field: map<string, utila.api.v1alpha2.ReferencedResource> referenced_resources = 1001;
   */
  referencedResources: { [key: string]: ReferencedResource };

  /**
   * A mapping of the referenced addresses in the message.
   * The key is the address and the value is the corresponding address info.
   *
   * @generated from field: map<string, utila.api.v1alpha2.NetworkAddressInfo> referenced_addresses_info = 1002;
   */
  referencedAddressesInfo: { [key: string]: NetworkAddressInfo };
};

/**
 * Describes the message utila.api.v1alpha2.InitiateTransactionResponse.
 * Use `create(InitiateTransactionResponseSchema)` to create a new message.
 */
export const InitiateTransactionResponseSchema: GenMessage<InitiateTransactionResponse> = /*@__PURE__*/
  messageDesc(file_utila_api_v1alpha2_initiatetx, 15);

