// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

// pnpx prisma generate    
// npx prisma db push   
// npx prisma studio  
// prisma migrate dev     

model SwapUserInfo {
  id                 String   @id @unique @default(uuid()) @map("_id")
  amount             Float?
  destinationAddress String?
  destinationNetwork String?
  destinationToken   String?
  refuel             Boolean  @default(false)
  sourceAddress      String?
  sourceNetwork      String?
  sourceToken        String?
  useDepositAddress  Boolean  @default(false)
  createdAt          DateTime @default(now())
}

model Network {
  id                          Int             @id @default(autoincrement())
  name                        String?
  displayName                 String?
  logo                        String?
  chainId                     String?
  nodeUrl                     String?
  type                        String?
  transactionExplorerTemplate String?
  accountExplorerTemplate     String?
  listingDate                 DateTime?
  token                       Token?          @relation(fields: [tokenId], references: [id])
  tokenId                     Int?            @unique
  depositActions              DepositAction[]
  Transaction                 Transaction[]
  transactionId               Int?            @unique
}

model Token {
  id                    Int            @id @default(autoincrement())
  symbol                String
  logo                  String
  contract              String?
  decimals              Int
  priceInUsd            Float
  precision             Int
  listingDate           DateTime?
  depositActionToken    DepositAction? @relation("DepositActionToken")
  depositActionFeeToken DepositAction? @relation("DepositActionFeeToken")
  transaction           Transaction[]
  Network               Network[]
  transactionId         Int?           @unique
}

model DepositAction {
  id                Int     @id @default(autoincrement())
  type              String? @default("transfer")
  toAddress         String?
  amount            Float?
  orderNumber       Int?
  amountInBaseUnits String?
  networkId         Int
  network           Network @relation(fields: [networkId], references: [id])
  tokenId           Int     @unique
  token             Token   @relation("DepositActionToken", fields: [tokenId], references: [id])
  feeTokenId        Int     @unique
  feeToken          Token   @relation("DepositActionFeeToken", fields: [feeTokenId], references: [id])
  callData          String?
  swapId            String  @unique @map("swap_id")
  swap              Swap    @relation(fields: [swapId], references: [id])

  @@index([swapId])
}

model Swap {
  id                     String           @id @default(uuid())
  createdDate            DateTime         @default(now())
  sourceNetworkName      String
  destinationNetworkName String
  sourceTokenSymbol      String
  destinationTokenSymbol String
  destinationAddress     String
  refuel                 Boolean
  useDepositAddress      Boolean
  isDeleted              Boolean          @default(false)
  sourceAddress          String
  requestedAmount        Float
  status                 String
  failReason             String?
  metadataSequenceNumber Int?
  depositActions         DepositAction[]
  quotes                 Quote[]
  contractAddress        ContractAddress?
  transactions           Transaction[]
}

model Transaction {
  id                Int      @id @default(autoincrement())
  from              String
  to                String
  timestamp         DateTime @default(now())
  transaction_hash  String
  confirmations     Int
  max_confirmations Int
  amount            Float
  type              String
  status            String
  tokenId           Int?
  networkId         Int?
  swapId            String?
  token             Token?   @relation(fields: [tokenId], references: [id])
  network           Network? @relation(fields: [networkId], references: [id])
  swap              Swap?    @relation(fields: [swapId], references: [id])
}

model ContractAddress {
  swapId  String? @unique @map("swap_id")
  swap    Swap?   @relation(fields: [swapId], references: [id])
  id      Int     @id @default(autoincrement())
  address String?
  name    String?
}

model Quote {
  id                Int    @id @default(autoincrement())
  swapId            String @map("swap_id")
  receiveAmount     Float
  minReceiveAmount  Float
  blockchainFee     Float
  serviceFee        Float
  avgCompletionTime String
  slippage          Float
  totalFee          Float
  totalFeeInUsd     Float
  swap              Swap   @relation(fields: [swapId], references: [id])
}
