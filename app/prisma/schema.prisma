// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

// datasource db {
//   provider  = "postgresql"
//   url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
//   directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
// }

datasource db {
  provider  = "sqlite"
  url       = "file:dev.sqlite" // uses connection pooling
  directUrl = "file:dev.sqlite" // uses a direct connection
}

// pnpx prisma generate    
// npx prisma db push   
// npx prisma studio  
// prisma migrate dev     

model SwapUserInfo {
  id                   String   @id @unique @default(uuid()) @map("_id")
  amount               Float?
  source_network       String?
  source_exchange      String?
  source_asset         String?
  source_address       String?
  destination_network  String?
  destination_exchange String?
  destination_asset    String?
  destination_address  String?
  refuel               Boolean  @default(false)
  use_deposit_address  Boolean  @default(false)
  createdAt            DateTime @default(now())
}

model Network {
  id                            Int             @id @default(autoincrement())
  name                          String?
  display_name                  String?
  logo                          String?
  chain_id                      String?
  node_url                      String?
  type                          String?
  transaction_explorer_template String?
  account_explorer_template     String?
  listing_date                  DateTime?
  token                         Token?          @relation(fields: [token_id], references: [id])
  token_id                      Int?            @unique
  deposit_actions               DepositAction[]
  transaction                   Transaction[]
  transaction_id                Int?            @unique

  @@index([transaction_id])
}

model Token {
  id                       Int            @id @default(autoincrement())
  symbol                   String
  logo                     String
  contract                 String?
  decimals                 Int
  price_in_usd             Float
  precision                Int
  listing_date             DateTime?
  deposit_action_token     DepositAction? @relation("DepositActionToken")
  deposit_action_fee_token DepositAction? @relation("DepositActionFeeToken")
  transaction              Transaction[]
  network                  Network[]
  transaction_id           Int?           @unique

  @@index([transaction_id])
}

model DepositAction {
  id                   Int     @id @default(autoincrement())
  type                 String? @default("transfer")
  to_address           String?
  amount               Float?
  order_number         Int?
  amount_in_base_units String?
  network_id           Int
  network              Network @relation(fields: [network_id], references: [id])
  token_id             Int     @unique
  token                Token   @relation("DepositActionToken", fields: [token_id], references: [id])
  fee_token_id         Int     @unique
  fee_token            Token   @relation("DepositActionFeeToken", fields: [fee_token_id], references: [id])
  call_data            String?
  swap_id              String  @unique @map("swap_id")
  swap                 Swap    @relation(fields: [swap_id], references: [id])

  @@index([swap_id])
}

model Swap {
  id                       String           @id @default(uuid())
  created_date             DateTime         @default(now())
  source_network           String
  source_exchange          String?
  source_asset             String
  source_address           String
  destination_network      String
  destination_exchange     String?
  destination_asset        String
  destination_address      String
  refuel                   Boolean
  use_deposit_address      Boolean
  is_deleted               Boolean          @default(false)
  requested_amount         Float
  status                   String
  fail_reason              String?
  metadata_sequence_number Int?
  deposit_address          DepositAddress   @relation(fields: [deposit_address_id], references: [id])
  deposit_address_id       Int
  
  quotes                   Quote?
  deposit_actions          DepositAction[]
  transactions             Transaction[]

  @@index([id])
}

model Transaction {
  id                Int      @id @default(autoincrement())
  from              String
  to                String
  created_date      DateTime @default(now())
  timestamp         DateTime @default(now())
  transaction_hash  String
  confirmations     Int
  max_confirmations Int
  amount            Float
  type              String
  status            String
  token_id          Int?
  network_id        Int?
  swap_id           String?
  token             Token?   @relation(fields: [token_id], references: [id])
  network           Network? @relation(fields: [network_id], references: [id])
  swap              Swap?    @relation(fields: [swap_id], references: [id])

  @@index([swap_id])
  @@index([status])
  @@index([transaction_hash])
  @@index([token_id])
  @@index([network_id])
}

model ContractAddress {
  swap_id String? @unique @map("swap_id")
  swap    Swap?   @relation(fields: [swap_id], references: [id])
  id      Int     @id @default(autoincrement())
  address String?
  name    String?
}

model Quote {
  id                  Int    @id @default(autoincrement())
  swap_id             String @unique @map("swap_id")
  receive_amount      Float
  min_receive_amount  Float
  blockchain_fee      Float
  service_fee         Float
  avg_completion_time String
  slippage            Float
  total_fee           Float
  total_fee_in_usd    Float
  swap                Swap   @relation(fields: [swap_id], references: [id])
}

model DepositAddress {
  id      Int    @id @default(autoincrement())
  type    String
  address String
  Swap    Swap[]

  @@index([type])
  @@index([address])
}
